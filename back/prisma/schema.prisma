generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Contract {
  id                  Int              @id @default(autoincrement())
  createdAt           DateTime         @default(now())
  endDate             DateTime
  startDate           DateTime
  userId              Int
  autoRenew           Boolean          @default(false)
  typeId              Int              @default(1)
  type                subscriptionType @relation(fields: [typeId], references: [id])
  remainingPromoCodes Int              @default(0)
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contrats")
}

model Game {
  id             Int                 @id @default(autoincrement())
  title          String
  description    String
  endDate        DateTime
  startDate      DateTime
  participations GameParticipation[]

  @@map("jeux")
}

model GameParticipation {
  id                Int      @id @default(autoincrement())
  gameId            Int
  participationDate DateTime @default(now())
  userId            Int
  game              Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([gameId], map: "user_jeux_gameId_fkey")
  @@index([userId], map: "user_jeux_userId_fkey")
  @@map("user_jeux")
}

model PromoCode {
  id          String   @id @default(uuid())
  description String?
  expiration  DateTime
  valid       Boolean  @default(false)
  userId      Int?
  merchantId  Int
  merchant    User     @relation(name: "MerchantPromoCodes", fields: [merchantId], references: [id], onDelete: Cascade)
  user        User?    @relation(name: "UserPromoCodes", fields: [userId], references: [id], onDelete: Cascade)

  @@index([merchantId], map: "codes_promo_merchantId_fkey")
  @@index([userId], map: "codes_promo_userId_fkey")
  @@map("codes_promo")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  createdAt          DateTime            @default(now())
  firstName          String
  lastName           String
  phoneNumber        String?
  userType           String
  contracts          Contract[]
  participations     GameParticipation[]
  userApiResults     UserApiResult[]
  userPromoCodes     PromoCode[]         @relation(name: "UserPromoCodes")
  merchantPromoCodes PromoCode[]         @relation(name: "MerchantPromoCodes")

  @@map("users")
}

model ApiResult {
  id                   Int             @id @default(autoincrement())
  siret                String          @unique
  adresseEtablissement String
  denominationUsuelle  String?
  latitude             Float?
  longitude            Float?
  categorieEntreprise  String?
  createdAt            DateTime        @default(now())
  picture              String?
  users                UserApiResult[]

  @@map("resultats_api")
}

model UserApiResult {
  id        Int       @id @default(autoincrement())
  userId    Int
  apiResult Int
  result    ApiResult @relation(fields: [apiResult], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_resultats_api_userId_fkey")
  @@index([apiResult], map: "user_resultats_api_apiResult_fkey")
  @@map("user_resultats_api")
}

model subscriptionType {
  id               Int        @id @default(autoincrement())
  name             String
  nbPromoCodes     Int
  accessToDasboard Boolean
  statistics       Boolean
  prioritySupport  Boolean
  price            Float
  contracts        Contract[]
}
